#!/bin/sh
set -eu
: "${BASEDIR:=/usr/src}"
: "${PORTSDIR:=${HOME}/ports/head}"
TARGET="generated_rules.c"
TMP="generated_rules.tmp"
OSRELS="11 12 13"

export LC_ALL=C

_make() {
	make -C "${PORTSDIR}/$1" "$@" | tr ' ' '\n' | awk 'NF' | sort -u
}

echo "/* Generated by generate_rules.sh; do not edit */" >"${TARGET}"

echo '#define VAR_FOR_EACH_ARCH(block, var, flags) \' >>"${TARGET}"
(
	make -C "${BASEDIR}" targets
	# Some arches are retired in FreeBSD 13 but still valid in other releases
	echo "/arm"
	echo "/sparc64"
	echo "/powerpcspe"
) | awk -F/ 'NR > 1 { lines[NR] = $2 }
END {
	for (i in lines) {
		printf "%s\t{ block, var \"%s\", flags }", start, lines[i]
		start = ", \\\n";
	}
	print ""
}' | sort -u >>"${TARGET}"

echo '#define VAR_FOR_EACH_FREEBSD_VERSION_AND_ARCH(block, var, flags) \' >>"${TARGET}"
echo '	{ block, var "FreeBSD", flags }, \' >>"${TARGET}"
for ver in ${OSRELS}; do
	echo "	{ block, var \"FreeBSD_${ver}\", flags }, \\" >>"${TARGET}"
	echo "	VAR_FOR_EACH_ARCH(block, var \"FreeBSD_${ver}_\", flags), \\" >>"${TARGET}"
done
echo '	VAR_FOR_EACH_ARCH(block, var "FreeBSD_", flags)' >>"${TARGET}"
echo '#define VAR_FOR_EACH_FREEBSD_VERSION(block, var, flags) \' >>"${TARGET}"
echo -n '	{ block, var "FreeBSD", flags }' >>"${TARGET}"
for ver in ${OSRELS}; do
	echo ', \' >>"${TARGET}"
	echo -n "	{ block, var \"FreeBSD_${ver}\", flags }" >>"${TARGET}"
done
echo >>"${TARGET}"

echo 'static const char *use_gnome_rel[] = {' >>"${TARGET}"
_make "Mk" -f "bsd.port.mk" USES=gnome -V _USE_GNOME_ALL >"${TMP}"
sed -e 's/^/	"/' -e 's/$/",/' "${TMP}" >>"${TARGET}"
# USES=gnome silently allows for bogus component:build args etc,
# but we do not.
while read comp; do
	build=$(_make "Mk" -f "bsd.port.mk" USES=gnome -V "${comp}_BUILD_DEPENDS")
	if [ -n "${build}" ]; then
		echo "${comp}" | sed -e 's/^/	"/' -e 's/$/:build",/'
	fi
done <"${TMP}" >>"${TARGET}"
while read comp; do
	build=$(_make "Mk" -f "bsd.port.mk" USES=gnome -V "${comp}_RUN_DEPENDS")
	if [ -n "${build}" ]; then
		echo "${comp}" | sed -e 's/^/	"/' -e 's/$/:run",/'
	fi
done <"${TMP}" >>"${TARGET}"
echo '};' >>"${TARGET}"

echo 'static const char *use_kde_rel[] = {' >>"${TARGET}"
_make "Mk" -f "bsd.port.mk" CATEGORIES=devel USES=kde:5 -V _USE_KDE5_ALL >"${TMP}"
sed -e 's/^/	"/' -e 's/$/",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_build",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_run",/' "${TMP}" >>"${TARGET}"
echo '};' >>"${TARGET}"

echo 'static const char *use_qt_rel[] = {' >>"${TARGET}"
_make "Mk" -f "bsd.port.mk" USES=qt:5 -V _USE_QT_ALL >"${TMP}"
sed -e 's/^/	"/' -e 's/$/",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_build",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_run",/' "${TMP}" >>"${TARGET}"
echo '};' >>"${TARGET}"

echo 'static const char *use_pyqt_rel[] = {' >>"${TARGET}"
_make "Mk" -f "bsd.port.mk" USES=pyqt:5 -V _USE_PYQT_ALL >"${TMP}"
sed -e 's/^/	"/' -e 's/$/",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_build",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_run",/' "${TMP}" >>"${TARGET}"
sed -e 's/^/	"/' -e 's/$/_test",/' "${TMP}" >>"${TARGET}"
echo '};' >>"${TARGET}"

echo '#define VAR_FOR_EACH_SSL(block, var, flags) \' >>"${TARGET}"
valid_ssl=$(awk '/^# Possible values: / { values = $0; gsub(/(^# Possible values: |,)/, "", values); }
/SSL_DEFAULT/ { print values; exit }' "${PORTSDIR}/Mk/bsd.default-versions.mk")
start=""
for ssl in ${valid_ssl}; do
	[ -n "${start}" ] && echo "${start}" >>"${TARGET}"
	echo -n "	{ block, var \"${ssl}\", flags }" >>"${TARGET}"
	start=", \\"
done
echo >>"${TARGET}"

echo "static const char *static_flavors_[] = {" >>"${TARGET}"
(
	_make "Mk" -f "bsd.port.mk" USES=lazarus:flavors -V FLAVORS
	_make "Mk" -f "bsd.port.mk" USES=php:flavors -V FLAVORS
	_make "devel/py-setuptools" BUILD_ALL_PYTHON_FLAVORS=yes -V FLAVORS
) | sed -e 's/^/	"/' -e 's/$/",/' >>"${TARGET}"
echo "};" >>"${TARGET}"

rm -f "${TMP}"
